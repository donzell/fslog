#log data dir.如果没有配置，默认是./
log.prefix:./log

#是否使用异步日志，只能是true | false.如不配置，默认false。
log.async:false

#可以自定义切分出来的文件的格式。就在基准文件名添加相应后缀。多进程情况下，请务必添加%P，进程号，否则多进程可能相互覆盖文件。
#目前这个库在检测到目标文件已经存在的时候，是不会rename的，防止覆盖掉日志文件。如果配置成_%P，只添加一个进程号，那每次都往一个文件里切，
#实际上不会切，依然只往老的里边打。所以一般我们应该配置成下面的格式。这样，绝对不会丢失日志。
#如同date命令的格式%Y%m%dH%M%S,#%P进程号，%n序列号，从000开始，如果同名文件存在，自动累加直到找到一个可用名字，上限999. 
#example: a.log_%Y%m%d%H%M%S_%P_%n,如果a.log.20121010090048_3164_000被占用，会去看a.log.20121010090048_3164_001是否可用
log.splitFormat:_%Y%m%d_%H%M%S_%P_%n

#NONE=0,
#FATAL=1,
#WARN=2,
#ERROR=3,
#NOTICE=4,
#TRACE=5,
#LOG=6,
#INFO=7,
#DEBUG=8,
#LEVEL_ALL=100,
# serverlog,dblog就是日志instance，用CLogger::GetInstance获取的。要和你的程序一致。
#每一个instance都配置了一个文件，而且允许两个instance用一个文件。像test3 test4都是test.log.不过一般还是把他们分开。
#文件可以是相对路径，可以是绝对路径。相对路径会以log.prefix为基准计算出realpath.
#logger_instance,format,logfile_path,logsize,loglevel
#L for level,N for instance,T for time,P for pid,t for tid,f for func,F for file,l for line,M for user's msg.
log.instance:serverlog,%L %N %T %P:%t %f(%F:%l) %M,server.log,2000000000,4
log.instance:dblog,%L %N %T %P:%t %f(%F:%l) %M,dblog.log,20000,100
log.instance:test3,%L %N %T %P %f(%F:%l) %M,test.log,20000,100
log.instance:test4,%L %N %T %P %f(%F:%l) %M,./log/test.log,10000,0

#多数情况下，也许是流传下来的习惯，我们会把wf日志再另外放到一个文件。方便察看。使用这个配置。所有级别是WARN，FATAL的日志就会在这里也出现一份。
log.instance:__LOG_WARN_FATLE__,%T %P %f(%F:%l) %M,./log/test.log.wf,10000,0